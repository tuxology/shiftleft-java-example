IMPORT io.shiftleft/defaultdict

### These methods are approved by AppSec ###

### TAG "CHECK" METHOD - This prefix indicates that the method is an approved validation method

### Pass the full name after -f using the below syntax
### Package name . Class name . Method name : Return type ( Argument type )
# Package name: io.shiftleft.controller
# Class name: AdminController
# Method name: isAdmin
# Return type: boolean
# Arguments: String (Expressed as java.lang.String in full form)

IMPORT io.shiftleft/xss
IMPORT io.shiftleft/execute
IMPORT io.shiftleft/fileWrite
IMPORT io.shiftleft/deserialization
IMPORT io.shiftleft/weakRandom
IMPORT io.shiftleft/weakHash
IMPORT io.shiftleft/fileRead
IMPORT io.shiftleft/sessionInject

TAG "CHECK" METHOD -f "io.shiftleft.controller.AdminController.isAdmin:boolean(java.lang.String)"

CONCLUSION xss-to-header = FLOW IO (http OR $http) -> IO (httpHeader)
WHEN CONCLUSION xss-to-header => EMIT {
     title: "XSS: HTTP data to header {{via `$paramname`}} {{in `$methodname`}}",
     category: "a7-XSS",
     description: "Data from HTTP request parameters is stored in HTTP headers. Unless the string is validated, this may result in a XSS attack.

## Countermeasures

This vulnerability can be prevented by using input sanitization/validation techniques (e.g., whitelisting) on the HTTP data before using it inside another HTTP header.

## How to prevent XSS attacks?

In general, effectively preventing XSS vulnerabilities is likely to involve a combination of the following measures:

- Filter input on arrival. At the point where user input is received, filter as strictly as possible based on what is expected or valid input.
- Encode data on output. At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.
- Use appropriate response headers. To prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.
- Content Security Policy. As a last line of defense, you can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.

## Additional information

**[CWE-79](https://cwe.mitre.org/data/definitions/79.html)**

**[OWASP-A7](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS))**",
     score: "8.0",
     vulnerability_description: "XSS",
     owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
     link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
     cwe_link: "https://cwe.mitre.org/data/definitions/79.html"
}


CONCLUSION xss-to-html = FLOW IO (http) -> DATA (NOT encrypted AND NOT hashed AND NOT escaped AND NOT encoded) -> IO (html AND NOT session)
WHEN CONCLUSION xss-to-html => EMIT {
     title: "XSS: HTTP data to HTML {{via `$paramname`}} {{in `$methodname`}}",
     category: "a7-XSS",
     description: "Data from HTTP request parameters is used in HTML or session information. Unless the string is validated, this may result in a XSS attack.

## Countermeasures

This vulnerability can be prevented by using input sanitization/validation techniques (e.g., whitelisting) on the HTTP data before using it inside another HTTP header.

## How to prevent XSS attacks?

In general, effectively preventing XSS vulnerabilities is likely to involve a combination of the following measures:

- Filter input on arrival. At the point where user input is received, filter as strictly as possible based on what is expected or valid input.
- Encode data on output. At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.
- Use appropriate response headers. To prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.
- Content Security Policy. As a last line of defense, you can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.

## Additional information

**[CWE-79](https://cwe.mitre.org/data/definitions/79.html)**

**[OWASP-A7](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS))**",
     score: "8.0",
     vulnerability_description: "XSS",
     owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
     link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
     cwe_link: "https://cwe.mitre.org/data/definitions/79.html"
}

